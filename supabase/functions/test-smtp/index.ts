import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { SmtpClient } from "https://deno.land/x/smtp@v0.7.0/mod.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type, x-requested-with',
  'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
  'Access-Control-Max-Age': '86400',
};

serve(async (req) => {
  // G√©rer les requ√™tes OPTIONS pour CORS - toujours autoris√©es
  if (req.method === 'OPTIONS') {
    return new Response(null, { 
      status: 200, 
      headers: corsHeaders 
    });
  }

  try {
    // V√©rifier l'authentification pour toutes les requ√™tes non-OPTIONS
    const authHeader = req.headers.get('authorization');
    if (!authHeader) {
      return new Response(
        JSON.stringify({ error: 'En-t√™te d\'autorisation manquant' }),
        { 
          status: 401, 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
        }
      );
    }

    // V√©rifier que c'est une requ√™te POST
    if (req.method !== 'POST') {
      return new Response(
        JSON.stringify({ error: 'M√©thode non autoris√©e' }),
        { 
          status: 405, 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
        }
      );
    }

    // R√©cup√©rer les param√®tres SMTP de la requ√™te
    const smtpConfig = await req.json();
    console.log('üìß Configuration SMTP re√ßue:', smtpConfig);
    
    // Valider les param√®tres requis
    const requiredFields = ['host', 'port', 'username', 'password'];
    for (const field of requiredFields) {
      if (!smtpConfig[field]) {
        return new Response(
          JSON.stringify({ error: `Champ requis manquant: ${field}` }),
          { 
            status: 400, 
            headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
          }
        );
      }
    }

    console.log('üîó Configuration SMTP valid√©e');
    console.log('üìç Host:', smtpConfig.host);
    console.log('üîå Port:', smtpConfig.port);
    console.log('üë§ Username:', smtpConfig.username);
    console.log('üîê Password:', smtpConfig.password ? '***' : 'manquant');
    console.log('üîí Encryption:', smtpConfig.encryption);

    // Pour le moment, on simule le test sans se connecter r√©ellement
    // Cela nous permet de v√©rifier que la fonction Edge fonctionne
    console.log('üß™ Simulation du test SMTP (connexion r√©elle d√©sactiv√©e)');
    
    // Simuler un d√©lai de test
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    console.log('‚úÖ Test SMTP simul√© avec succ√®s');

    return new Response(
      JSON.stringify({ 
        success: true, 
        message: 'Test SMTP simul√© - La fonction Edge fonctionne correctement. La connexion r√©elle sera test√©e plus tard.' 
      }),
      { 
        status: 200, 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    );

  } catch (error) {
    console.error('üí• Erreur lors du test SMTP:', error);
    
    const errorMessage = error instanceof Error ? error.message : 'Erreur inconnue';
    
    return new Response(
      JSON.stringify({ 
        error: `Test de connexion SMTP √©chou√©: ${errorMessage}`,
        details: errorMessage
      }),
      { 
        status: 500, 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    );
  }
});
