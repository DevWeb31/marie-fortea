/**
 * Utilitaires pour le formatage des dur√©es
 */

/**
 * Formate une dur√©e en heures d√©cimales vers le format "8h30"
 * @param durationHours - Dur√©e en heures d√©cimales (ex: 8.5)
 * @returns Dur√©e format√©e (ex: "8h30")
 */
export const formatDuration = (durationHours: number): string => {
  // DEBUG PROD: Log de la fonction formatDuration
  console.log('üîç DEBUG PROD formatDuration - Input:', {
    durationHours,
    type: typeof durationHours,
    isNull: durationHours === null,
    isUndefined: durationHours === undefined,
    isNaN: isNaN(durationHours)
  });
  
  if (!durationHours || durationHours <= 0) {
    console.log('üîç DEBUG PROD formatDuration - Retour 0h car:', {
      durationHours,
      condition: !durationHours || durationHours <= 0
    });
    return '0h';
  }
  
  const hours = Math.floor(durationHours);
  const minutes = Math.round((durationHours - hours) * 60);
  
  const result = minutes === 0 ? `${hours}h` : `${hours}h${minutes.toString().padStart(2, '0')}`;
  
  console.log('üîç DEBUG PROD formatDuration - R√©sultat:', {
    input: durationHours,
    hours,
    minutes,
    result
  });
  
  return result;
};

/**
 * Formate une dur√©e en heures d√©cimales vers le format "8h30" avec le texte "Dur√©e:"
 * @param durationHours - Dur√©e en heures d√©cimales (ex: 8.5)
 * @returns Dur√©e format√©e avec pr√©fixe (ex: "Dur√©e: 8h30")
 */
export const formatDurationWithLabel = (durationHours: number): string => {
  return `Dur√©e: ${formatDuration(durationHours)}`;
};
